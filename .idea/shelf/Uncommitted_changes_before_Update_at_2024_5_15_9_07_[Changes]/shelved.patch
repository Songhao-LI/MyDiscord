Index: Server/MyDiscord/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\r\n\r\n# Create your views here.\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status, viewsets\r\nfrom .models import User\r\nfrom .serializers import UserSerializer\r\n\r\n\r\nclass UserViewSet(viewsets.ModelViewSet):\r\n    queryset = User.objects.all()\r\n    serializer_class = UserSerializer\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        response = super().list(request, *args, **kwargs)\r\n        if response.data:\r\n            return response\r\n        else:\r\n            return Response({'data': [], 'message': 'No users found'}, status=status.HTTP_200_OK)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/MyDiscord/views.py b/Server/MyDiscord/views.py
--- a/Server/MyDiscord/views.py	(revision 59666cb34120f264aa99db9cb2b668b81329d5c2)
+++ b/Server/MyDiscord/views.py	(date 1715467727385)
@@ -2,9 +2,13 @@
 
 # Create your views here.
 from rest_framework.response import Response
-from rest_framework import status, viewsets
+from rest_framework import status, viewsets, permissions
 from .models import User
+from .models import Thread
+from .models import Message
 from .serializers import UserSerializer
+from .serializers import MessageSerializer
+from .serializers import ThreadSerializer
 
 
 class UserViewSet(viewsets.ModelViewSet):
@@ -17,3 +21,17 @@
             return response
         else:
             return Response({'data': [], 'message': 'No users found'}, status=status.HTTP_200_OK)
+
+
+class ThreadViewSet(viewsets.ModelViewSet):
+    queryset = Thread.objects.all()
+    serializer_class = ThreadSerializer
+
+
+class MessageViewSet(viewsets.ModelViewSet):
+    queryset = Message.objects.all()
+    serializer_class = MessageSerializer
+    permission_classes = [permissions.AllowAny]
+
+    def perform_create(self, serializer):
+        serializer.save(author_id=self.request.user)  # Automatically set the author to the current user
Index: Server/Server/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for Server project.\r\n\r\nGenerated by 'django-admin startproject' using Django 4.2.11.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/4.2/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/4.2/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-b296hv_8ffc3&jfdo6fas-fnevhwiy4hsyumwt1!bk#wy(y#z('\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'MyDiscord.apps.MydiscordConfig',\r\n    'rest_framework',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'Server.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates']\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'Server.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\r\n\r\n# DATABASES = {\r\n#     'default': {\r\n#         'ENGINE': 'django.db.backends.sqlite3',\r\n#         'NAME': BASE_DIR / 'db.sqlite3',\r\n#     }\r\n# }\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.postgresql',\r\n        'NAME': 'myDiscord',\r\n        'USER': 'postgres',\r\n        'PASSWORD': 'lsh1209',\r\n        'HOST': 'localhost',\r\n        'PORT': '5432',\r\n    }\r\n}\r\n\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\n# enable CORS request\r\nCORS_ORIGIN_ALLOW_ALL = True
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/Server/settings.py b/Server/Server/settings.py
--- a/Server/Server/settings.py	(revision 59666cb34120f264aa99db9cb2b668b81329d5c2)
+++ b/Server/Server/settings.py	(date 1715468341106)
@@ -87,7 +87,7 @@
         'ENGINE': 'django.db.backends.postgresql',
         'NAME': 'myDiscord',
         'USER': 'postgres',
-        'PASSWORD': 'lsh1209',
+        'PASSWORD': 'Arisu_0325',
         'HOST': 'localhost',
         'PORT': '5432',
     }
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1715458000836)
+++ b/.idea/modules.xml	(date 1715458000836)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/project.iml" filepath="$PROJECT_DIR$/.idea/project.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/project.iml b/.idea/project.iml
new file mode 100644
--- /dev/null	(date 1715458000830)
+++ b/.idea/project.iml	(date 1715458000830)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.11 (pythonProject)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1715450300500)
+++ b/.idea/.gitignore	(date 1715450300500)
@@ -0,0 +1,10 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Zeppelin ignored files
+/ZeppelinRemoteNotebooks/
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1715458000851)
+++ b/.idea/vcs.xml	(date 1715458000851)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Server/MyDiscord/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom .models import User\r\n\r\n\r\nclass UserSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = User\r\n        fields = '__all__'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/MyDiscord/serializers.py b/Server/MyDiscord/serializers.py
--- a/Server/MyDiscord/serializers.py	(revision 59666cb34120f264aa99db9cb2b668b81329d5c2)
+++ b/Server/MyDiscord/serializers.py	(date 1715467981608)
@@ -1,8 +1,48 @@
 from rest_framework import serializers
 from .models import User
 
+from .models import Thread
+from .models import Message
+
 
 class UserSerializer(serializers.ModelSerializer):
     class Meta:
         model = User
         fields = '__all__'
+
+
+class ThreadSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Thread
+        fields = '__all__'
+
+
+class MessageSerializer(serializers.ModelSerializer):
+    author_id = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
+    thread_id = serializers.PrimaryKeyRelatedField(queryset=Thread.objects.all(), allow_null=True, required=False)
+
+    class Meta:
+        model = Message
+        fields = ['message_id', 'title', 'timestamp', 'text_body', 'longitude', 'latitude', 'author_id', 'thread_id']
+
+    def create(self, validated_data):
+        author = validated_data.pop('author_id', None)
+        thread = validated_data.pop('thread_id', None)
+
+        # Check if thread exists, if not create a new one
+        if not thread:
+            thread = Thread.objects.create()
+
+        # Ensure no duplicate 'thread_id' entry in validated_data
+        validated_data.pop('thread_id', None)  # Removing this line because it's unnecessary and can be confusing
+
+        # Create the message using the correct field names from the model
+        message = Message.objects.create(author_id=author, thread_id=thread, **validated_data)
+
+        # Check if this is the first message of the thread and update the initial message if necessary
+        if thread and thread.initial_message is None:
+            thread.initial_message = message
+            thread.save()
+
+        return message
+
Index: Server/MyDiscord/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\n\r\n\r\nclass User(models.Model):\r\n    uID = models.AutoField(primary_key=True)\r\n    block_id = models.IntegerField(null=True, blank=True)\r\n    hood_id = models.IntegerField(null=True, blank=True)\r\n    username = models.CharField(max_length=100)\r\n    password = models.CharField(max_length=100)\r\n    profile = models.TextField()\r\n    photo = models.CharField(max_length=100)\r\n    home_longitude = models.FloatField()\r\n    home_latitude = models.FloatField()\r\n    last_access = models.DateTimeField(auto_now_add=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/MyDiscord/models.py b/Server/MyDiscord/models.py
--- a/Server/MyDiscord/models.py	(revision 59666cb34120f264aa99db9cb2b668b81329d5c2)
+++ b/Server/MyDiscord/models.py	(date 1715471573106)
@@ -12,3 +12,23 @@
     home_longitude = models.FloatField()
     home_latitude = models.FloatField()
     last_access = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self):
+        return self.username
+
+
+class Thread(models.Model):
+    thread_id = models.AutoField(primary_key=True)
+    initial_message_id = models.OneToOneField('Message', related_name='initiating_thread',
+                                              on_delete=models.SET_NULL, null=True, blank=True)
+
+
+class Message(models.Model):
+    message_id = models.AutoField(primary_key=True)
+    title = models.CharField(max_length=255)
+    timestamp = models.DateTimeField()
+    text_body = models.TextField()
+    longitude = models.DecimalField(max_digits=10, decimal_places=8)
+    latitude = models.DecimalField(max_digits=11, decimal_places=8)
+    author_id = models.ForeignKey('User', on_delete=models.CASCADE, related_name='messages')
+    thread_id = models.ForeignKey(Thread, on_delete=models.CASCADE, related_name='messages', null=True, blank=True)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1715458000844)
+++ b/.idea/misc.xml	(date 1715458000844)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (pythonProject)" project-jdk-type="Python SDK" />
+  <component name="PyCharmDSProjectLayout">
+    <option name="id" value="JupyterRightHiddenStructureLayout" />
+  </component>
+</project>
\ No newline at end of file
Index: Server/MyDiscord/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path, include\r\nfrom rest_framework.routers import DefaultRouter\r\nfrom .views import UserViewSet  # 导入视图集\r\n\r\nrouter = DefaultRouter()\r\nrouter.register(r'users', UserViewSet)  # 注册视图集\r\n\r\nurlpatterns = [\r\n    path('', include(router.urls)),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/MyDiscord/urls.py b/Server/MyDiscord/urls.py
--- a/Server/MyDiscord/urls.py	(revision 59666cb34120f264aa99db9cb2b668b81329d5c2)
+++ b/Server/MyDiscord/urls.py	(date 1715458489417)
@@ -1,9 +1,12 @@
 from django.urls import path, include
 from rest_framework.routers import DefaultRouter
-from .views import UserViewSet  # 导入视图集
+from .views import UserViewSet, ThreadViewSet, MessageViewSet # 导入视图集
 
 router = DefaultRouter()
-router.register(r'users', UserViewSet)  # 注册视图集
+router.register(r'users', UserViewSet)
+router.register(r'message', MessageViewSet)
+router.register(r'thread', ThreadViewSet)
+
 
 urlpatterns = [
     path('', include(router.urls)),
